[{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fdf-uni.github.io/ddfr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to ddfr","text":"installed package (probably GitHub), can loaded R using following command: focus package working custom S4 class ddf provides convenient way work discrete distributions finite support R. three slots called supp, probs desc , order, give support distribution, corresponding probabilities short description respective distribution. can accessed using getters supp(), probs() desc(). description also setter can easily changed:","code":"library(ddfr) mydist <- ddf(1:6, rep(1 / 6, 6), \"A first description\") mydist #> A first description  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 supp(mydist) #> [1] 1 2 3 4 5 6 desc(mydist) <- \"This description fits better\" mydist #> This description fits better  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667"},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"manually","dir":"Articles","previous_headings":"Creating new ddf objects","what":"Manually","title":"Introduction to ddfr","text":"intended way create custom new ddf objects use provided function name. takes arguments numerical vector specifying support distribution, second numerical vector length containing corresponding probabilities lastly, optional description distribution. example, create distribution modeling single throw fair six-sided dice, one can use: Note probabilities approximately sum \\(1\\) otherwise function throws error. might change future, current implementation, error less 1e-10: case one probabilities, absolute frequencies instead, one can also use ddf_from_frequencies() alternative. example, following creates ddf object hypothetical counts throwing six-sided dice one hundred times: one can see, arguments mostly except passing frequencies instead probabilities second argument. details methods please consult documentation ddf() ddf_from_frequencies(), respectively.","code":"ddf(1:6, rep(1 / 6, 6), \"A distribution modeling a single dice throw\") #> A distribution modeling a single dice throw  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 # Probabilities don't sum up to ≈1 try(ddf(1, 1 - 1e-10)) #> Error in validObject(.Object) :  #>   invalid class \"ddf\" object: probabilities have to sum up to approximately 1  # This works ddf(1, 1 - 1e-11) #> A discrete distribution with finite support  #>  #> Support: #> [1] 1 #>  #> Probabilities: #> [1] 1 ddf_from_frequencies(1:6, c(19, 14, 17, 18, 15, 17), \"My dice throws\") #> My dice throws  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.19 0.14 0.17 0.18 0.15 0.17"},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"using-the-already-implemented-distributions","dir":"Articles","previous_headings":"Creating new ddf objects","what":"Using the already implemented distributions","title":"Introduction to ddfr","text":"ddfr already provides large amount common discrete distributions. list shows currently implemented discrete distributions finite support. learn single one , use help R, e.g. ?bin(). ’d like mention Reference might also convenient way find specific distribution ’re looking . Discrete uniform distribution unif() Bernoulli distribution bernoulli() Binomial distribution bin() Rademacher distribution rademacher() Benford’s law benford() Zipf distribution zipf() Hypergeometric distribution hypergeometric() Negative hypergeometric distribution negative_hypergeometric() Beta-binomial distribution beta_binomial() Furthermore, also functions create approximations following three discrete distributions countably infinite support. Poisson distribution pois() Negative binomial distribution negative_bin() Geometric distribution geometric() approximation works finding large enough number \\(r > 0\\) cutting support \\(r\\) yields overall probability within given range \\(\\epsilon\\) \\(1\\). default value \\(\\epsilon\\) 1e-10, however can customized using eps argument. Unless normalize argument manually set FALSE (default TRUE) approximation also normalized sum probabilities becomes precisely one. following examples demonstrate , however, details might also want check respective documentation function ’re using.","code":"# Approximation of the Poisson distribution # to demonstrate the `normalize` argument p <- pois(20, normalize = FALSE)  # Not equal to one (but still pretty close): 1 - sum(probs(p)) #> [1] 9.051593e-11  # Note how the `normalize` argument here could be omitted # since it is `TRUE` by default p_normalized <- pois(20, normalize = TRUE)  # Now the summed probabilities are equal to one: 1 - sum(probs(p_normalized)) #> [1] 0   # For most cases, something like this should suffice geometric(0.8) #> (Approximation of a) geometric distribution with p = 0.8, starting at 0  #>  #> Support: #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> Probabilities: #>  [1] 8.00000e-01 1.60000e-01 3.20000e-02 6.40000e-03 1.28000e-03 2.56000e-04 #>  [7] 5.12000e-05 1.02400e-05 2.04800e-06 4.09600e-07 8.19200e-08 1.63840e-08 #> [13] 3.27680e-09 6.55360e-10 1.31072e-10  # However, you can of course increase the accuracy if you want to geometric(0.8, eps = .Machine$double.eps) #> (Approximation of a) geometric distribution with p = 0.8, starting at 0  #>  #> Support: #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 #>  #> Probabilities: #>  [1] 8.000000e-01 1.600000e-01 3.200000e-02 6.400000e-03 1.280000e-03 #>  [6] 2.560000e-04 5.120000e-05 1.024000e-05 2.048000e-06 4.096000e-07 #> [11] 8.192000e-08 1.638400e-08 3.276800e-09 6.553600e-10 1.310720e-10 #> [16] 2.621440e-11 5.242880e-12 1.048576e-12 2.097152e-13 4.194304e-14 #> [21] 8.388608e-15 1.677722e-15"},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"from-other-ddf-objects","dir":"Articles","previous_headings":"Creating new ddf objects","what":"From other ddf objects","title":"Introduction to ddfr","text":"Lastly, also possibility use already existing ddf objects create new ones. Currently two functions . first one generic method - support distribution can multiplied \\(-1\\): second one function shift() support distribution can shifted specified amount:","code":"-bin(5, 0.8) #> Binomial distribution with parameters n = 5 and p = 0.8, multiplied with -1  #>  #> Support: #> [1] -5 -4 -3 -2 -1  0 #>  #> Probabilities: #> [1] 0.32768 0.40960 0.20480 0.05120 0.00640 0.00032 shift(unif(3), 3) #> Discrete uniform distribution on {1, ..., 3}, shifted by 3  #>  #> Support: #> [1] 4 5 6 #>  #> Probabilities: #> [1] 0.3333333 0.3333333 0.3333333"},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"analysis-of-distributions","dir":"Articles","previous_headings":"","what":"Analysis of distributions","title":"Introduction to ddfr","text":"ddfr provides many ways analyze given distribution. section lists corresponding functions. details, respective documentations hopefully suffice.","code":""},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"central-tendency","dir":"Articles","previous_headings":"Analysis of distributions","what":"Central tendency","title":"Introduction to ddfr","text":"Expected value expected_value() generic mean() Medians medians() (plural form aren’t necessarily unique) Modes modes() (plural form aren’t necessarily unique)","code":""},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"dispersion","dir":"Articles","previous_headings":"Analysis of distributions","what":"Dispersion","title":"Introduction to ddfr","text":"Standard deviation standard_deviation() Variance variance() Interquartile range iqr() Range distribution_range()","code":""},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"moments","dir":"Articles","previous_headings":"Analysis of distributions","what":"Moments","title":"Introduction to ddfr","text":"\\(n\\)-th raw moment moment() \\(n\\)-th central moment central_moment() \\(n\\)-th standardized moment standardized_moment() Besides , also additional functions calculating specific often used moments (besides already previously mentioned variance): Skewness skew() Kurtosis kurtosis() Excess kurtosis excess_kurtosis()","code":""},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"quantiles","dir":"Articles","previous_headings":"Analysis of distributions","what":"Quantiles","title":"Introduction to ddfr","text":"Quantiles quantiles() Percentiles percentile() Deciles decile() Quartiles quartile()","code":""},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"entropy","dir":"Articles","previous_headings":"Analysis of distributions","what":"Entropy","title":"Introduction to ddfr","text":"Entropy entropy()","code":""},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"report","dir":"Articles","previous_headings":"Analysis of distributions","what":"Report","title":"Introduction to ddfr","text":"case one wants quickly get overview considered distribution, also function report() , name suggests, writes report given distribution involving properties. following example demonstrates (please purpose better readability, output printed normal text): given distribution described “Binomial distribution parameters n = 15 p = 0.7”. mean/expected value 10.5, average mode(s) given 11 average median(s) 11. unimodal distribution. Regarding dispersion, calculating variance yields 3.15 implies standard deviation 1.77482393492988. talking measures variability, one can assert distribution’s range constitutes 15 16 elements, whereas interquartile range given 3 since (smallest) first quartile 9 (largest) third quartile 12. skewness -0.225374467927603 (measured using Fisher’s moment coefficient skewness) excess kurtosis -0.0825396825396827 (hence kurtosis 2.91746031746032) platykurtic, also called platykurtotic, distribution. Lastly, can noted entropy, measured bits, 2.86637454085645.","code":"cat(report(bin(15, 0.7)))"},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"creating-r-functions","dir":"Articles","previous_headings":"Creating new objects from ddf distributions","what":"Creating R functions","title":"Introduction to ddfr","text":"One can use pmf cdf get R functions behaving like probability mass function cumulative distribution function given distribution, respectively. Especially first two rather useful can used get probability number: Note also works numbers part distribution’s support, case function simply returns \\(0\\):","code":"# Probability of 5 in a binomial distribution with parameters n = 10 and p = 0.7 pmf(bin(10, 0.7))(5) #> [1] 0.1029193 pmf(bin(10, 0.7))(3.5) #> [1] 0"},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"sampling","dir":"Articles","previous_headings":"Creating new objects from ddf distributions","what":"Sampling","title":"Introduction to ddfr","text":"Use samples() create samples based distribution. example, one can simulate 10 fair dice throws follows: function also used generate frequency table dice throws “Creating new ddf objects” section.","code":"samples(unif(6), 10) #>  [1] 2 1 5 2 2 4 4 3 6 6"},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Introduction to ddfr","text":"ddfr also provides extensive plotting capabilities via three functions plot(), plot_pmf() plot_cdf(). first one generic S4 class ddf. least comes plots, image worth thousand words, three functions action:","code":"plot(bin(30, 0.3)) plot_pmf(bin(30, 0.3)) plot_cdf(bin(30, 0.3))"},{"path":"https://fdf-uni.github.io/ddfr/articles/ddfr.html","id":"convolutions","dir":"Articles","previous_headings":"","what":"Convolutions","title":"Introduction to ddfr","text":"Lastly, possibility calculate convolutions distributions. example, compute distribution sum two six-sided dice tossed together, one can use second example shows generic * also defined objects ddf class quickly convolve distributions. function conv_n() calculates \\(n\\)-fold convolution distribution , see ?conv_n() details. Lastly, also function convolve_cpp() underlying implementation convolution using Rcpp better performance. really intended use ddfr objects directly, might still useful applications.","code":"conv(unif(6), unif(6)) #> A convolution  #>  #> Support: #>  [1]  2  3  4  5  6  7  8  9 10 11 12 #>  #> Probabilities: #>  [1] 0.02777778 0.05555556 0.08333333 0.11111111 0.13888889 0.16666667 #>  [7] 0.13888889 0.11111111 0.08333333 0.05555556 0.02777778  # Short hand using * unif(6) * unif(6) #> A convolution  #>  #> Support: #>  [1]  2  3  4  5  6  7  8  9 10 11 12 #>  #> Probabilities: #>  [1] 0.02777778 0.05555556 0.08333333 0.11111111 0.13888889 0.16666667 #>  [7] 0.13888889 0.11111111 0.08333333 0.05555556 0.02777778"},{"path":"https://fdf-uni.github.io/ddfr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"fdf. Author, maintainer.","code":""},{"path":"https://fdf-uni.github.io/ddfr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"fdf (2024). ddfr: Work discrete distributions finite support R. R package version 1.0.0, https://github.com/fdf-uni/ddfr/, https://fdf-uni.github.io/ddfr/.","code":"@Manual{,   title = {ddfr: Work with discrete distributions with finite support in R},   author = {{fdf}},   year = {2024},   note = {R package version 1.0.0, https://github.com/fdf-uni/ddfr/},   url = {https://fdf-uni.github.io/ddfr/}, }"},{"path":"https://fdf-uni.github.io/ddfr/index.html","id":"ddfr-","dir":"","previous_headings":"","what":"Work with discrete distributions with finite support in R","title":"Work with discrete distributions with finite support in R","text":"goal ddfr make easier work Discrete Distributions Finite support R. specific details, can check website (case aren’t already reading ) also linked description package’s GitHub repository. Especially Introduction ddfr provide relevant information get started package. installed package relevant option (see “Installation”), can also access vignette within R using: Alternatively, ’d prefer view browser, also:","code":"vignette(\"ddfr\") browseVignettes(\"ddfr\")"},{"path":"https://fdf-uni.github.io/ddfr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Work with discrete distributions with finite support in R","text":"can install development version ddfr like : want able access vignettes within R described , use:","code":"remotes::install_github(\"fdf-uni/ddfr\") remotes::install_github(\"fdf-uni/ddfr\", build_vignettes = TRUE)"},{"path":"https://fdf-uni.github.io/ddfr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Work with discrete distributions with finite support in R","text":"basic example shows ddfr’s features:","code":"library(ddfr) # Create uniform distribution on {1, ..., 6} dist <- unif(6)  # Get some information about the distribution expected_value(dist) variance(dist)  # Convolve it with itself conv(dist, dist) # This can also be done a bit quicker dist * dist  # Plot the probability mass function of a binomial distribution plot_pmf(bin(20, 0.3))"},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":null,"dir":"Reference","previous_headings":"","what":"Benford's law — benford","title":"Benford's law — benford","text":"Create ddf object describing Benford's law given base.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benford's law — benford","text":"","code":"benford(b)"},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benford's law — benford","text":"b integer, base number system. least 2.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benford's law — benford","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Benford's law — benford","text":"Benford's law describes phenomenon many real-life numerical data sets, leading digits tend small. , given arbitrary base \\(b\\), one can consider distribution support \\(\\{1, \\dots, b-1\\}\\) probability mass function $$p(k) = \\log_b \\left( 1 + \\frac{1}{k} \\right)$$ defined, subscript \\(b\\) denotes base logarithm. information, refer linked Wikipedia article.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Benford's law — benford","text":"https://en.wikipedia.org/wiki/Benford%27s_law","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/benford.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benford's law — benford","text":"","code":"# Expected distribution of first digits,according # to Benford's law, in the decimal system benford(10) #> Benford's law in base 10  #>  #> Support: #> [1] 1 2 3 4 5 6 7 8 9 #>  #> Probabilities: #> [1] 0.30103000 0.17609126 0.12493874 0.09691001 0.07918125 0.06694679 0.05799195 #> [8] 0.05115252 0.04575749"},{"path":"https://fdf-uni.github.io/ddfr/reference/bernoulli.html","id":null,"dir":"Reference","previous_headings":"","what":"The Bernoulli distribution — bernoulli","title":"The Bernoulli distribution — bernoulli","text":"Create ddf object Bernoulli distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bernoulli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Bernoulli distribution — bernoulli","text":"","code":"bernoulli(p)"},{"path":"https://fdf-uni.github.io/ddfr/reference/bernoulli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Bernoulli distribution — bernoulli","text":"p number 0 1, success probability.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bernoulli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Bernoulli distribution — bernoulli","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bernoulli.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Bernoulli distribution — bernoulli","text":"Bernoulli distribution success probability \\(p\\) two elements \\(0\\) \\(1\\) support corresponding probability mass function given $$p(k) = \\begin{cases} p & \\text{} k = 1,\\\\ 1-p & \\text{} k = 0. \\end{cases}$$ Hence, can used model experiments asking single yes-question experiments whose outcomes \"success\" \"failure\".","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/bernoulli.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Bernoulli distribution — bernoulli","text":"","code":"# Distribution modelling a fair coin toss bernoulli(1 / 2) #> Bernoulli distribution with p = 0.5  #>  #> Support: #> [1] 0 1 #>  #> Probabilities: #> [1] 0.5 0.5"},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"The beta-binomial distribution — beta_binomial","title":"The beta-binomial distribution — beta_binomial","text":"Create ddf object beta-binomial distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The beta-binomial distribution — beta_binomial","text":"","code":"beta_binomial(n, alpha, beta)"},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The beta-binomial distribution — beta_binomial","text":"n non-negative integer, number trials. alpha, beta Positive numbers, shape parameters underlying beta distribution. See ‘Details.’","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The beta-binomial distribution — beta_binomial","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The beta-binomial distribution — beta_binomial","text":"beta-binomial distribution modification binomial distribution (see also bin()) success probability every experiment fixed number \\(p\\), instead randomly drawn beta distribution every experiment. Said rigorously, support \\(\\{0, \\dots, n\\}\\) \\(n\\) number trials. support, probability mass function given $$p(k) = \\binom{n}{k} \\frac{B(k + \\alpha, n - k + \\beta)}{B(\\alpha, \\beta)}.$$ , \\(B(, b) = \\frac{\\Gamma() \\Gamma(b)}{\\Gamma(+ b)}\\) denotes beta function (see also base::beta()). Note \\(\\alpha\\) \\(\\beta\\) integers, coincides negative hypergeometric distribution parameters \\(N = n + \\alpha + \\beta - 1\\), \\(K = n\\) \\(r = \\alpha\\), .e. generalizes negative hypergeometric distribution (described negative_hypergeometric()). also explored bit ‘Examples’ .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The beta-binomial distribution — beta_binomial","text":"https://en.wikipedia.org/wiki/Beta-binomial_distribution","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/beta_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The beta-binomial distribution — beta_binomial","text":"","code":"beta_binomial(4, 0.6, 2) #> Beta-binomial distribution with parameters n = 4, alpha = 0.6 and beta = 2  #>  #> Support: #> [1] 0 1 2 3 4 #>  #> Probabilities: #> [1] 0.49769072 0.23889154 0.14333493 0.08281573 0.03726708  # If all arguments are integers, it coincides with # a negative hypergeometric distribution beta_binomial(8, 5, 2) #> Beta-binomial distribution with parameters n = 8, alpha = 5 and beta = 2  #>  #> Support: #> [1] 0 1 2 3 4 5 6 7 8 #>  #> Probabilities: #> [1] 0.002997003 0.013320013 0.034965035 0.069930070 0.116550117 0.167832168 #> [7] 0.209790210 0.219780220 0.164835165 negative_hypergeometric(14, 8, 5) #> Negative hypergeometric distribution with parameters N = 14, K = 8 and r = 5  #>  #> Support: #> [1] 0 1 2 3 4 5 6 7 8 #>  #> Probabilities: #> [1] 0.002997003 0.013320013 0.034965035 0.069930070 0.116550117 0.167832168 #> [7] 0.209790210 0.219780220 0.164835165"},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":null,"dir":"Reference","previous_headings":"","what":"The binomial distribution — bin","title":"The binomial distribution — bin","text":"Create ddf object binomial distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The binomial distribution — bin","text":"","code":"bin(n, p)"},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The binomial distribution — bin","text":"function uses stats::dbinom() calculate distribution efficiently.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The binomial distribution — bin","text":"n integer, number trials. p number 0 1, success probability trial.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The binomial distribution — bin","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The binomial distribution — bin","text":"binomial distribution parameters \\(n\\) \\(p\\) models number successes conducting \\(n\\) independent experiments one distributed according Bernoulli distribution success probability \\(p\\) (see also bernoulli()). support \\(\\{0, \\dots, n\\}\\) probability mass function given $$p(k) = \\binom{n}{k} p^k (1-p)^{n-k}.$$","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The binomial distribution — bin","text":"","code":"# How often a six can be expected when # throwing a six-sided dice thrice bin(3, 1 / 6) #> Binomial distribution with parameters n = 3 and p = 0.166666666666667  #>  #> Support: #> [1] 0 1 2 3 #>  #> Probabilities: #> [1] 0.57870370 0.34722222 0.06944444 0.00462963"},{"path":"https://fdf-uni.github.io/ddfr/reference/cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative distribution function — cdf","title":"Cumulative distribution function — cdf","text":"Create R function behaves like cumulative distribution function (CDF) given ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative distribution function — cdf","text":"","code":"cdf(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative distribution function — cdf","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative distribution function — cdf","text":"function.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative distribution function — cdf","text":"cumulative distribution function \\(F_X\\) discrete random variable \\(X\\) given $$F_X(x) = \\mathbb{P}[X \\le x],$$ \\(\\mathbb{P}\\) probability operator.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative distribution function — cdf","text":"","code":"# Get value at 8 of the CDF of a geometric distribution cdf(geometric(0.4))(8) #> [1] 0.9899223"},{"path":"https://fdf-uni.github.io/ddfr/reference/central_moment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate central moments of distributions — central_moment","title":"Calculate central moments of distributions — central_moment","text":"function calculates \\(n\\)-th central moment, also known \\(n\\)-th moment mean, ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/central_moment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate central moments of distributions — central_moment","text":"","code":"central_moment(dist, n)"},{"path":"https://fdf-uni.github.io/ddfr/reference/central_moment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate central moments of distributions — central_moment","text":"dist ddf object, distribution. n integer, order moment.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/central_moment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate central moments of distributions — central_moment","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/central_moment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate central moments of distributions — central_moment","text":"\\(n\\)-th central moment random variable \\(X\\) given $$E[(X - E[X])^n],$$ \\(E\\) expectation operator.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/central_moment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate central moments of distributions — central_moment","text":"","code":"# The zeroth central moment is always 1 central_moment(bin(5, 0.4), 0) #> [1] 1  # The first central moment is always 0 central_moment(hypergeometric(10, 7, 5), n = 1) #> [1] 0  # The second central moment is the variance central_moment(unif(10), 2) #> [1] 8.25 # Result using the formula for the uniform distribution (10^2 - 1) / 12 #> [1] 8.25"},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convolve two discrete distributions — conv","title":"Convolve two discrete distributions — conv","text":"Using function, two distributions, given ddf objects, can convolved.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolve two discrete distributions — conv","text":"","code":"conv(dist1, dist2, desc = \"A convolution\")  # S4 method for class 'ddf,ddf' e1 * e2"},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Convolve two discrete distributions — conv","text":"hood, functions uses C++ implementation calculating convolution order get significant performance gains, compare convolve_cpp().","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolve two discrete distributions — conv","text":"dist1 ddf object, first distribution. dist2 ddf object, second distribution. desc character, description resulting ddf object (optional) e1 ddf object, first distribution. e2 ddf object, second distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convolve two discrete distributions — conv","text":"Convolution ddf object.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convolve two discrete distributions — conv","text":"general, given two functions \\(f\\) \\(g\\) defined set \\(\\mathbb{Z}\\) integers, discrete convolution \\(f\\) \\(g\\) given $$(f \\ast g)(n) = \\sum_{m=-\\infty}^{\\infty} f(n-m) g(m).$$ Note sum right hand side ranges products arguments \\(f\\) \\(g\\) integers \\(k,l\\\\mathbb{Z}\\) \\(k+l=n\\). implementation convolution uses last observation basis makes possible also calculate convolution domains (subsets ) \\(\\mathbb{Z}\\) (course still discrete). stochastic interpretation convolution, recall given two independent random variables \\(X\\) \\(Y\\) probability mass functions \\(p_X\\) \\(p_Y\\), sum \\(X + Y\\) probability mass function \\(p_X \\ast p_Y\\). Hence, convolving two ddf distributions gives distribution corresponding sum.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/conv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convolve two discrete distributions — conv","text":"","code":"# Calculate the distribution of the sum of throwing a dice twice dice <- ddf(1:6) conv(dice, dice, desc = \"Distribution of throwing a dice twice\") #> Distribution of throwing a dice twice  #>  #> Support: #>  [1]  2  3  4  5  6  7  8  9 10 11 12 #>  #> Probabilities: #>  [1] 0.02777778 0.05555556 0.08333333 0.11111111 0.13888889 0.16666667 #>  [7] 0.13888889 0.11111111 0.08333333 0.05555556 0.02777778 # (Up to description) equivalent call using generic method dice * dice #> A convolution  #>  #> Support: #>  [1]  2  3  4  5  6  7  8  9 10 11 12 #>  #> Probabilities: #>  [1] 0.02777778 0.05555556 0.08333333 0.11111111 0.13888889 0.16666667 #>  [7] 0.13888889 0.11111111 0.08333333 0.05555556 0.02777778   # Note that for distributions which are approximated without # also being normalized, approximation errors can propagate # when convolving: try(conv(unif(5), geometric(0.9, normalize = FALSE))) #> Error in h(simpleError(msg, call)) :  #>   error in evaluating the argument 'dist' in selecting a method for function 'supp': invalid class “ddf” object: probabilities have to sum up to approximately 1  # This can be corrected by using a better approximation conv(unif(5), geometric(0.9, eps = 1e-11, normalize = FALSE)) #> A convolution  #>  #> Support: #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> Probabilities: #>  [1] 1.80000e-01 1.98000e-01 1.99800e-01 1.99980e-01 1.99998e-01 1.99998e-02 #>  [7] 1.99998e-03 1.99998e-04 1.99998e-05 1.99998e-06 1.99998e-07 1.99980e-08 #> [13] 1.99800e-09 1.98000e-10 1.80000e-11  # Or simply by normalizing conv(unif(5), geometric(0.9)) #> A convolution  #>  #> Support: #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> Probabilities: #>  [1] 1.80000e-01 1.98000e-01 1.99800e-01 1.99980e-01 1.99998e-01 1.99998e-02 #>  [7] 1.99998e-03 1.99998e-04 1.99998e-05 1.99998e-06 1.99980e-07 1.99800e-08 #> [13] 1.98000e-09 1.80000e-10   # When one is interested in the difference instead of # the sum, one can use the generic `-` which multiplies # the support of a distribution with -1 conv(unif(6), -unif(6)) #> A convolution  #>  #> Support: #>  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5 #>  #> Probabilities: #>  [1] 0.02777778 0.05555556 0.08333333 0.11111111 0.13888889 0.16666667 #>  [7] 0.13888889 0.11111111 0.08333333 0.05555556 0.02777778"},{"path":"https://fdf-uni.github.io/ddfr/reference/conv_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the n-fold convolution of a distribution with itself — conv_n","title":"Calculate the n-fold convolution of a distribution with itself — conv_n","text":"Using function, distribution, given ddf object, can convolved \\(n\\) times.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the n-fold convolution of a distribution with itself — conv_n","text":"","code":"conv_n(dist, n, desc = NULL)"},{"path":"https://fdf-uni.github.io/ddfr/reference/conv_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the n-fold convolution of a distribution with itself — conv_n","text":"dist ddf object, distribution. n integer specifying number convolutions perform. desc description resulting ddf object. (optional)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the n-fold convolution of a distribution with itself — conv_n","text":"\\(n\\)-fold convolution ddf object.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/conv_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the n-fold convolution of a distribution with itself — conv_n","text":"details, see conv().","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/conv_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the n-fold convolution of a distribution with itself — conv_n","text":"","code":"# Calculate the distribution of the sum of # throwing a dice four times conv_n(ddf(1:6), 4, desc = \"Distribution of throwing a dice four times\") #> 4-fold convolution of A discrete distribution with finite support  #>  #> Support: #>  [1]  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>  #> Probabilities: #>  [1] 0.0007716049 0.0030864198 0.0077160494 0.0154320988 0.0270061728 #>  [6] 0.0432098765 0.0617283951 0.0802469136 0.0964506173 0.1080246914 #> [11] 0.1126543210 0.1080246914 0.0964506173 0.0802469136 0.0617283951 #> [16] 0.0432098765 0.0270061728 0.0154320988 0.0077160494 0.0030864198 #> [21] 0.0007716049 # Model a symmetric random walk starting at 0 # with step size 1 of length 4 conv_n(rademacher(), 4) #> 4-fold convolution of Rademacher distribution  #>  #> Support: #> [1] -4 -2  0  2  4 #>  #> Probabilities: #> [1] 0.0625 0.2500 0.3750 0.2500 0.0625"},{"path":"https://fdf-uni.github.io/ddfr/reference/convolve_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convolve two discrete distributions — convolve_cpp","title":"Convolve two discrete distributions — convolve_cpp","text":"convolve_cpp returns convolution two discrete distributions given supports corresponding probabilities. really intended use ddf objects rather general situations. want convolve two ddf distributions, recommended certainly convenient use conv() instead.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/convolve_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolve two discrete distributions — convolve_cpp","text":"","code":"convolve_cpp(supp1, probs1, supp2, probs2)"},{"path":"https://fdf-uni.github.io/ddfr/reference/convolve_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolve two discrete distributions — convolve_cpp","text":"supp1, probs1 Numeric vectors length. supp2, probs2 Numeric vectors length.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/convolve_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convolve two discrete distributions — convolve_cpp","text":"list.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/convolve_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convolve two discrete distributions — convolve_cpp","text":"assumptions made function work properly followed. importantly, corresponding numeric vectors (e.g. supp1 probs1) length. function returns list components \"support\" \"probabilities\" give matching attributes convolution.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/convolve_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convolve two discrete distributions — convolve_cpp","text":"","code":"# Calculate the probability distribution # of the sum of two six-sided dice convolve_cpp((1:6), rep(1/6, 6), (1:6), rep(1/6, 6)) #> $support #>  [1]  2  3  4  5  6  7  8  9 10 11 12 #>  #> $probabilities #>  [1] 0.02777778 0.05555556 0.08333333 0.11111111 0.13888889 0.16666667 #>  [7] 0.13888889 0.11111111 0.08333333 0.05555556 0.02777778 #>"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a discrete distribution with finite support — ddf-class","title":"An S4 class to represent a discrete distribution with finite support — ddf-class","text":"discrete distribution finite support represented probability mass function (PMF). , one slot stores support PMF numeric vector another slot storing value PMF corresponding point support. one slot description.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 class to represent a discrete distribution with finite support — ddf-class","text":"New ddf objects checked validity ensure fulfill basic properties discrete probability distribution finite support. relevant checks : Support probability vectors must length. probabilities lie 0 (excluded) 1 (included). , 0 included elements support , definition, non-zero probability. probabilities sum approximately 1. Currently tolerance set 1e-10.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a discrete distribution with finite support — ddf-class","text":"supp numeric vector, support. probs numeric vector, corresponding probabilities. desc character, short description discrete distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply the support of a distribution with -1 — -,ddf,missing-method","title":"Multiply the support of a distribution with -1 — -,ddf,missing-method","text":"Multiply support distribution -1","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply the support of a distribution with -1 — -,ddf,missing-method","text":"","code":"# S4 method for class 'ddf,missing' e1 - e2"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply the support of a distribution with -1 — -,ddf,missing-method","text":"e1 ddf object, distribution. e2 Unused argument. missing.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply the support of a distribution with -1 — -,ddf,missing-method","text":"ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply the support of a distribution with -1 — -,ddf,missing-method","text":"","code":"-bin(5, 0.1) #> Binomial distribution with parameters n = 5 and p = 0.1, multiplied with -1  #>  #> Support: #> [1] -5 -4 -3 -2 -1  0 #>  #> Probabilities: #> [1] 0.00001 0.00045 0.00810 0.07290 0.32805 0.59049"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new ddf objects — ddf","title":"Create new ddf objects — ddf","text":"Use function create new ddf object passing support corresponding probabilities vectors .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new ddf objects — ddf","text":"","code":"ddf(   supp,   probs = rep(1/length(supp), length(supp)),   desc = \"A discrete distribution with finite support\" )"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new ddf objects — ddf","text":"supp numeric vector, support. probs numeric vector, corresponding probabilities desc character, short description discrete distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new ddf objects — ddf","text":"ddf object specified attributes.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new ddf objects — ddf","text":"function makes sure ddf objects \"clean\" ensuring following two conditions: passed support ordered ascending order. Duplicates within support removed probabilities affected elements simply summed . Elements passed \"support\" probability 0 removed , definition, contained support. probabilities supplied, distributed uniformly specified support.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new ddf objects — ddf","text":"","code":"# Create ddf object for an ordinary six-sided dice dice <- ddf(1:6, desc = \"Distribution modelling a six-sided dice\") dice #> Distribution modelling a six-sided dice  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 # Create ddf object for an unfair coin toss without custom description coin_toss <- ddf(c(1, 2), c(1 / 4, 3 / 4)) coin_toss #> A discrete distribution with finite support  #>  #> Support: #> [1] 1 2 #>  #> Probabilities: #> [1] 0.25 0.75"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf_from_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","title":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","text":"Use function create new ddf object based absolute frequencies passing occurred observations corresponding absolute frequencies vectors .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf_from_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","text":"","code":"ddf_from_frequencies(   events,   frequencies = rep(1/length(events), length(events)),   desc = paste(\"A discrete distribution with finite support,\",     \"generated from frequencies\") )"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf_from_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","text":"events numeric vector, event space. frequencies numeric vector, corresponding absolute frequencies. desc character, short description discrete distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf_from_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","text":"ddf object described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf_from_frequencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","text":"Although purpose package work discrete distributions finite support, might still helpful use functions working frequency counts. example, one might want calculate interquartile range excess kurtosis. purpose function make possible convenient way. new ddf object created dividing frequency counts total number observations resulting vector sums 1. function furthermore ensures quality checks ddf() (see ‘Details.’ section) behaviour frequencies passed, .e. probabilities distributed uniformly specified observations.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/ddf_from_frequencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new ddf objects from absolute frequencies — ddf_from_frequencies","text":"","code":"# Create ddf object from (hypothetical) frequencies # of tossing a fair coin 10 times coin_tosses <- ddf_from_frequencies(c(1, 2), c(3, 7)) coin_tosses #> A discrete distribution with finite support, generated from frequencies  #>  #> Support: #> [1] 1 2 #>  #> Probabilities: #> [1] 0.3 0.7"},{"path":"https://fdf-uni.github.io/ddfr/reference/ddfr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ddfr: Work with discrete distributions with finite support in R — ddfr-package","title":"ddfr: Work with discrete distributions with finite support in R — ddfr-package","text":"package enables create objects representing discrete distributions finite support specifying probability mass functions. objects can used variety tasks, simple statistical analyses plotting convolutions.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/ddfr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ddfr: Work with discrete distributions with finite support in R — ddfr-package","text":"Maintainer: fdf 171835561+fdf-uni@users.noreply.github.com","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/decile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate deciles of distributions — decile","title":"Calculate deciles of distributions — decile","text":"function calculates \\(k\\)-th decile ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/decile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate deciles of distributions — decile","text":"","code":"decile(dist, k, method = \"all\")"},{"path":"https://fdf-uni.github.io/ddfr/reference/decile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate deciles of distributions — decile","text":"dist ddf object, distribution. k integer 0 10, exclusive. method character specifying output format.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/decile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate deciles of distributions — decile","text":"numeric vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/decile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate deciles of distributions — decile","text":"details consult details quantiles() recall \\(k\\)-th decile \\(k/10\\)-quantile vice versa.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/decile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate deciles of distributions — decile","text":"","code":"decile(bin(10, 0.3), 3) #> [1] 2"},{"path":"https://fdf-uni.github.io/ddfr/reference/desc-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the description of a ddf object — desc<-","title":"Set the description of a ddf object — desc<-","text":"Set description ddf object","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/desc-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the description of a ddf object — desc<-","text":"","code":"desc(dist) <- value  # S4 method for class 'ddf' desc(dist) <- value"},{"path":"https://fdf-uni.github.io/ddfr/reference/desc-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the description of a ddf object — desc<-","text":"dist ddf object, distribution. value character, new description.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/desc-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the description of a ddf object — desc<-","text":"New description text ddf object.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/desc-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the description of a ddf object — desc<-","text":"","code":"mydist <- unif(8) print(mydist) #> Discrete uniform distribution on {1, ..., 8}  #>  #> Support: #> [1] 1 2 3 4 5 6 7 8 #>  #> Probabilities: #> [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 desc(mydist) <- \"This distribution needs a better description\" print(mydist) #> This distribution needs a better description  #>  #> Support: #> [1] 1 2 3 4 5 6 7 8 #>  #> Probabilities: #> [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125"},{"path":"https://fdf-uni.github.io/ddfr/reference/desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the description of a ddf object — desc","title":"Get the description of a ddf object — desc","text":"function returns description given distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the description of a ddf object — desc","text":"","code":"desc(dist)  # S4 method for class 'ddf' desc(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the description of a ddf object — desc","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the description of a ddf object — desc","text":"character, description text ddf object.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/desc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the description of a ddf object — desc","text":"","code":"desc(ddf(1:3)) #> [1] \"A discrete distribution with finite support\" desc(ddf(1:3, desc = \"My custom description\")) #> [1] \"My custom description\""},{"path":"https://fdf-uni.github.io/ddfr/reference/distribution_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the range of distributions — distribution_range","title":"Calculate the range of distributions — distribution_range","text":"function calculates range ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/distribution_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the range of distributions — distribution_range","text":"","code":"distribution_range(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/distribution_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the range of distributions — distribution_range","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/distribution_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the range of distributions — distribution_range","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/distribution_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the range of distributions — distribution_range","text":"range length narrowest interval containing entire support.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/distribution_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the range of distributions — distribution_range","text":"","code":"# Range of the Rademacher distribution distribution_range(rademacher()) #> [1] 2"},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the entropy of distributions — entropy","title":"Calculate the entropy of distributions — entropy","text":"function calculates entropy ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the entropy of distributions — entropy","text":"","code":"entropy(dist, base = 2)"},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the entropy of distributions — entropy","text":"dist ddf object, distribution. base positive real number, base logarithm. See ‘Details.’","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the entropy of distributions — entropy","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the entropy of distributions — entropy","text":"entropy \\(\\Eta\\) discrete random variable \\(X\\) image \\(\\mathcal{X}\\) probability mass function \\(p\\) defined $$\\Eta = - \\sum_{x\\\\mathcal{X}} p(x) \\log_b(p(x)),$$ \\(b\\) denotes base logarithm used. Common values \\(b\\) \\(2\\), Euler's constant \\(e\\) \\(10\\) corresponding units entropy \"bits\" (\"shannons\"), \"nats\" \"bans\" (also called \"hartleys\" \"dits\"), respectively. Entropy measures level \"surprise\" possible outcomes.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the entropy of distributions — entropy","text":"https://en.wikipedia.org/wiki/Entropy_(information_theory)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the entropy of distributions — entropy","text":"","code":"# The entropy of two fair coin tosses in \"bits\" is 2 entropy(unif(4)) #> [1] 2"},{"path":"https://fdf-uni.github.io/ddfr/reference/excess_kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the excess kurtosis of distributions — excess_kurtosis","title":"Calculate the excess kurtosis of distributions — excess_kurtosis","text":"function calculates excess kurtosis ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/excess_kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the excess kurtosis of distributions — excess_kurtosis","text":"","code":"excess_kurtosis(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/excess_kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the excess kurtosis of distributions — excess_kurtosis","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/excess_kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the excess kurtosis of distributions — excess_kurtosis","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/excess_kurtosis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the excess kurtosis of distributions — excess_kurtosis","text":"excess kurtosis simply defined kurtosis() minus 3, hence refer linked help page details.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/excess_kurtosis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the excess kurtosis of distributions — excess_kurtosis","text":"","code":"excess_kurtosis(unif(8)) #> [1] -1.238095"},{"path":"https://fdf-uni.github.io/ddfr/reference/expected_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the expected value of distributions — expected_value","title":"Calculate the expected value of distributions — expected_value","text":"function calculates mean/expected value discrete distribution finite support given ddf object.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/expected_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the expected value of distributions — expected_value","text":"","code":"expected_value(dist)  # S4 method for class 'ddf' mean(x)"},{"path":"https://fdf-uni.github.io/ddfr/reference/expected_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the expected value of distributions — expected_value","text":"dist ddf object, distribution. x ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/expected_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the expected value of distributions — expected_value","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/expected_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the expected value of distributions — expected_value","text":"expected value discrete random variable \\(X\\) finite support \\(\\{x_1, \\dots, x_n\\}\\) corresponding probabilities \\(p_1, \\dots, p_n\\) defined weighted average \\(x_k\\) values weights \\(p_k\\), $$E[X] := \\sum_{k=1}^n x_k p_k.$$ work discrete distributions finite support, provide general definition using tools measure theory instead content basic one . Note two ways use function, one expected_value() one S4 generic method mean(). See also ‘Examples.’","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/expected_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the expected value of distributions — expected_value","text":"","code":"# Expected value when throwing a six-sided dice expected_value(unif(6)) #> [1] 3.5 # Equivalent result using generic method mean(unif(6)) #> [1] 3.5"},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":null,"dir":"Reference","previous_headings":"","what":"The geometric distribution — geometric","title":"The geometric distribution — geometric","text":"Create ddf object geometric distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The geometric distribution — geometric","text":"","code":"geometric(p, start_at_one = FALSE, eps = 1e-10, normalize = TRUE)"},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The geometric distribution — geometric","text":"order calculate fitting cutoff, quantile function stats::qnbinom() used. stats::dnbinom() employed calculate distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The geometric distribution — geometric","text":"p number 0 1, success probability experiment. start_at_one Logical, whether start support 0 1. (default: FALSE) eps positive number, close distribution approximated. See ‘Details.’ (default: 1e-10) normalize Logical, whether normalize approximated distribution. (default: TRUE)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The geometric distribution — geometric","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The geometric distribution — geometric","text":"geometric distribution can refer either following two distributions: probability distribution number iid Bernoulli trials common success probability \\(p\\) needed get success. support \\(\\mathbb{N}^+\\) probability mass function given $$p(k) = (1-p)^{k-1} p.$$ probability distribution number failures first success observed experiment . Note simply corresponds first one shift \\(1\\), .e. support \\(\\mathbb{N}_0\\) probability mass function given $$p(k) = (1-p)^k p.$$ former two distributions often referred shifted geometric distribution. function supports conventions via start_at_one argument. Note , geometric distribution countably infinite support package works discrete distributions finite support, resulting ddf object can approximate geometric distribution. , support cut large enough integer overall probability still close 1. cutoff controlled via eps argument specifies close sum probabilities 1. default value 1e-10 since also minimum accuracy required creating valid ddf objects. default, .e. unless normalize set FALSE, specified accuracy raise problems even larger 1e-10 approximation normalized end (, approximating probabilities divided sum). ensures returned object actual distribution overall probability precisely one.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/geometric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The geometric distribution — geometric","text":"","code":"geometric(0.8) #> (Approximation of a) geometric distribution with p = 0.8, starting at 0  #>  #> Support: #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> Probabilities: #>  [1] 8.00000e-01 1.60000e-01 3.20000e-02 6.40000e-03 1.28000e-03 2.56000e-04 #>  [7] 5.12000e-05 1.02400e-05 2.04800e-06 4.09600e-07 8.19200e-08 1.63840e-08 #> [13] 3.27680e-09 6.55360e-10 1.31072e-10 # A more accurate approximation of the same distribution, # starting at 1 instead of 0 geometric(0.8, TRUE, 1e-15) #> (Approximation of a) geometric distribution with p = 0.8, starting at 1  #>  #> Support: #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 #>  #> Probabilities: #>  [1] 8.000000e-01 1.600000e-01 3.200000e-02 6.400000e-03 1.280000e-03 #>  [6] 2.560000e-04 5.120000e-05 1.024000e-05 2.048000e-06 4.096000e-07 #> [11] 8.192000e-08 1.638400e-08 3.276800e-09 6.553600e-10 1.310720e-10 #> [16] 2.621440e-11 5.242880e-12 1.048576e-12 2.097152e-13 4.194304e-14 #> [21] 8.388608e-15"},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":null,"dir":"Reference","previous_headings":"","what":"The hypergeometric distribution — hypergeometric","title":"The hypergeometric distribution — hypergeometric","text":"Create ddf object hypergeometric distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The hypergeometric distribution — hypergeometric","text":"","code":"hypergeometric(N, K, n)"},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The hypergeometric distribution — hypergeometric","text":"function uses stats::dhyper() calculate distribution efficiently.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The hypergeometric distribution — hypergeometric","text":"N positive integer, population size. K non-negative integer, number success states population. less equal N. n non-negative integer, number draws. less equal N.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The hypergeometric distribution — hypergeometric","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The hypergeometric distribution — hypergeometric","text":"hypergeometric distribution models number successes drawing \\(n\\) elements, without replacement, finite population size \\(N\\) contains \\(K\\) success states. support $$\\{\\max(0, n+K-N), \\dots, \\min(n, K)\\}$$ probability mass function given $$p(k) = \\frac{\\binom{K}{k} \\binom{N-K}{n-k}}{\\binom{N}{n}}.$$","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/hypergeometric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The hypergeometric distribution — hypergeometric","text":"","code":"# Model the total number of blue marbles when # drawing 5 marbles from an urn containing # 6 blue marbles and 20 marbles in total hypergeometric(20, 6, 5) #> Hypergeometric distribution with parameters N = 20, K = 6 and n = 5  #>  #> Support: #> [1] 0 1 2 3 4 5 #>  #> Probabilities: #> [1] 0.1291279670 0.3873839009 0.3521671827 0.1173890609 0.0135448916 #> [6] 0.0003869969"},{"path":"https://fdf-uni.github.io/ddfr/reference/iqr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the interquartile range of distributions — iqr","title":"Calculate the interquartile range of distributions — iqr","text":"function calculates interquartile range ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/iqr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the interquartile range of distributions — iqr","text":"","code":"iqr(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/iqr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the interquartile range of distributions — iqr","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/iqr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the interquartile range of distributions — iqr","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/iqr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the interquartile range of distributions — iqr","text":"interquartile range defined difference \\(Q_3 - Q_1\\), \\(Q_1\\) \\(Q_3\\) first third quartiles, respectively (information see quartile() quantile()). function always returns largest possible interquartile range, .e. third quartile unique, uses maximum third quartiles first quartile unique, uses smallest one.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/iqr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the interquartile range of distributions — iqr","text":"","code":"# Interquartile range of a uniform distribution iqr(unif(10)) #> [1] 5"},{"path":"https://fdf-uni.github.io/ddfr/reference/kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the kurtosis of distributions — kurtosis","title":"Calculate the kurtosis of distributions — kurtosis","text":"function calculates kurtosis ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the kurtosis of distributions — kurtosis","text":"","code":"kurtosis(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the kurtosis of distributions — kurtosis","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the kurtosis of distributions — kurtosis","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/kurtosis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the kurtosis of distributions — kurtosis","text":"kurtosis given fourth standardized moment, thus details one can consult standardized_moment(). measures \"tailedness\" distribution, .e. heaviness tails. higher kurtosis indicates higher propensity produce outliers.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/kurtosis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the kurtosis of distributions — kurtosis","text":"","code":"# The rademacher distribution has a very low kurtosis # (in fact it is as minimal as possible) kurtosis(rademacher()) #> [1] 1 # A binomial distribution with relatively low probability # has rather high kurtosis kurtosis(bin(10, 1e-4)) #> [1] 1002.5"},{"path":"https://fdf-uni.github.io/ddfr/reference/medians.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate medians of distributions — medians","title":"Calculate medians of distributions — medians","text":"function calculates median(s) distribution, given ddf object. case median unique, default possible values returned. behaviour can controlled using methods argument.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/medians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate medians of distributions — medians","text":"","code":"medians(dist, method = \"all\")"},{"path":"https://fdf-uni.github.io/ddfr/reference/medians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate medians of distributions — medians","text":"dist ddf object, distribution. method character specifying output format.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/medians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate medians of distributions — medians","text":"numeric vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/medians.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate medians of distributions — medians","text":"details consult details quantile() recall median \\(\\frac{1}{2}\\)-quantile vice versa.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/medians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate medians of distributions — medians","text":"","code":"# In case the mode is not unique, by default all # possible modes are returned medians(unif(4)) #> [1] 2 3 # This can be controlled using the method argument medians(unif(4), method = \"mean\") #> [1] 2.5"},{"path":"https://fdf-uni.github.io/ddfr/reference/modes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate modes of distributions — modes","title":"Calculate modes of distributions — modes","text":"function calculates mode distribution, given ddf object. case mode unique, default possible values returned. behaviour can controlled using methods argument.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/modes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate modes of distributions — modes","text":"","code":"modes(dist, method = \"all\")"},{"path":"https://fdf-uni.github.io/ddfr/reference/modes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate modes of distributions — modes","text":"dist ddf object, distribution. method character specifying output format.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/modes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate modes of distributions — modes","text":"numeric vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/modes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate modes of distributions — modes","text":"mode discrete random variable \\(X\\) value probability mass function \\(X\\) takes maximal value. general, unique reason function method argument. method set \"\", values support mode given distribution returned. default behaviour. method set \"mean\", mean values returned. method set \"min\" \"max\", respective elements modes returned.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/modes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate modes of distributions — modes","text":"","code":"# In case the mode is not unique, by default all # possible modes are returned modes(unif(3)) #> [1] 1 2 3 # This can be controlled using the method argument modes(unif(3), method = \"mean\") #> [1] 2"},{"path":"https://fdf-uni.github.io/ddfr/reference/moment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate moments of distributions — moment","title":"Calculate moments of distributions — moment","text":"function calculates \\(n\\)-th (raw) moment, also known \\(n\\)-th moment zero, ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/moment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate moments of distributions — moment","text":"","code":"moment(dist, n)"},{"path":"https://fdf-uni.github.io/ddfr/reference/moment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate moments of distributions — moment","text":"dist ddf object, distribution. n integer, order moment.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/moment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate moments of distributions — moment","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/moment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate moments of distributions — moment","text":"\\(n\\)-th (raw) moment random variable \\(X\\) given $$E[X^n],$$ \\(E\\) expectation operator.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/moment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate moments of distributions — moment","text":"","code":"# Expected value when throwing a six-sided dice moment(unif(6), 1) #> [1] 3.5"},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"The negative binomial distribution — negative_bin","title":"The negative binomial distribution — negative_bin","text":"Create ddf object negative binomial distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The negative binomial distribution — negative_bin","text":"","code":"negative_bin(r, p, eps = 1e-10, normalize = TRUE)"},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The negative binomial distribution — negative_bin","text":"order calculate fitting cutoff, quantile function stats::qnbinom() used. stats::dnbinom() employed calculate distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The negative binomial distribution — negative_bin","text":"r positive number, number successes experiment stopped. p number 0 1, success probability experiment. eps positive number, close distribution approximated. See ‘Details.’ (default: 1e-10) normalize Logical, whether normalize approximated distribution. (default: TRUE)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The negative binomial distribution — negative_bin","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The negative binomial distribution — negative_bin","text":"negative binomial distribution models number failures sequence iid Bernoulli trials (see also bernoulli()) common success probability \\(p\\), specified number \\(r\\) successes occurs. support \\(\\mathbb{N}_0\\) probability mass function given $$p(k) = \\binom{k+r-1}{k} (1-p)^k p^r.$$ Note second parameter \\(r\\) can generalized arbitrary positive reals currently documented function also . negative binomial distribution countably infinite support package works discrete distributions finite support, resulting ddf object can approximate negative binomial distribution. , support cut large enough integer overall probability still close 1. cutoff controlled via eps argument specifies close sum probabilities 1. default value 1e-10 since also minimum accuracy required creating valid ddf objects. default, .e. unless normalize set FALSE, specified accuracy raise problems even larger 1e-10 approximation normalized end (, approximating probabilities divided sum). ensures returned object actual distribution overall probability precisely one.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The negative binomial distribution — negative_bin","text":"","code":"# 'r' does not have to be an integer negative_bin(2.25, 0.95) #> (Approximation of a) negative binomial distribution with parameters r = 2.25 and p = 0.95  #>  #> Support: #> [1] 0 1 2 3 4 5 6 7 8 #>  #> Probabilities: #> [1] 8.910008e-01 1.002376e-01 8.144305e-03 5.768882e-04 3.785829e-05 #> [6] 2.366143e-06 1.429545e-07 8.424103e-09 4.870185e-10 # A more accurate approximation of the same distribution negative_bin(2.25, 0.95, 1e-12) #> (Approximation of a) negative binomial distribution with parameters r = 2.25 and p = 0.95  #>  #> Support: #>  [1]  0  1  2  3  4  5  6  7  8  9 10 #>  #> Probabilities: #>  [1] 8.910008e-01 1.002376e-01 8.144305e-03 5.768882e-04 3.785829e-05 #>  [6] 2.366143e-06 1.429545e-07 8.424103e-09 4.870185e-10 2.773300e-11 #> [11] 1.559981e-12"},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_hypergeometric.html","id":null,"dir":"Reference","previous_headings":"","what":"The negative hypergeometric distribution — negative_hypergeometric","title":"The negative hypergeometric distribution — negative_hypergeometric","text":"Create ddf object negative hypergeometric distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_hypergeometric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The negative hypergeometric distribution — negative_hypergeometric","text":"","code":"negative_hypergeometric(N, K, r)"},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_hypergeometric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The negative hypergeometric distribution — negative_hypergeometric","text":"N positive integer, population size. K non-negative integer, number success states population. less equal N. r non-negative integer, number failures experiment stopped. less equal N-K.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_hypergeometric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The negative hypergeometric distribution — negative_hypergeometric","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_hypergeometric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The negative hypergeometric distribution — negative_hypergeometric","text":"negative hypergeometric distribution models number successes drawing, without replacement, elements finite population size \\(N\\) contains \\(K\\) success states precisely \\(r\\) failures found. support \\(\\{0, \\dots, K\\}\\) probability mass function given $$p(k) = \\frac{\\binom{k+r-1}{k} \\binom{N-r-k}{K-k}}{\\binom{N}{K}}.$$ beta-binomial distribution provides generalization negative hypergeometric distribution, see beta_binomial().","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/negative_hypergeometric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The negative hypergeometric distribution — negative_hypergeometric","text":"","code":"# Model how many blue marbles are drawn from an urn containing # 20 marbles of which 6 are blue, when one stops as soon # as one has found 5 non-blue marbles negative_hypergeometric(20, 6, 5) #> Negative hypergeometric distribution with parameters N = 20, K = 6 and r = 5  #>  #> Support: #> [1] 0 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.129127967 0.258255934 0.276702786 0.198658411 0.099329205 0.032507740 #> [7] 0.005417957"},{"path":"https://fdf-uni.github.io/ddfr/reference/percentile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate percentiles of distributions — percentile","title":"Calculate percentiles of distributions — percentile","text":"function calculates \\(k\\)-th percentile ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/percentile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate percentiles of distributions — percentile","text":"","code":"percentile(dist, k, method = \"all\")"},{"path":"https://fdf-uni.github.io/ddfr/reference/percentile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate percentiles of distributions — percentile","text":"dist ddf object, distribution. k integer 0 100, exclusive. method character specifying output format.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/percentile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate percentiles of distributions — percentile","text":"numeric vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/percentile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate percentiles of distributions — percentile","text":"details consult details quantiles() recall \\(k\\)-th percentile \\(k/100\\)-quantile vice versa.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/percentile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate percentiles of distributions — percentile","text":"","code":"percentile(bin(10, 0.3), 30) #> [1] 2"},{"path":"https://fdf-uni.github.io/ddfr/reference/plot-ddf-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a distribution — plot,ddf,missing-method","title":"Plot a distribution — plot,ddf,missing-method","text":"Create plot ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot-ddf-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a distribution — plot,ddf,missing-method","text":"","code":"# S4 method for class 'ddf,missing' plot(   x,   xlab = \"support\",   ylab = \"probabilities\",   col = \"deepskyblue3\",   main = NULL,   sub = NULL,   y )"},{"path":"https://fdf-uni.github.io/ddfr/reference/plot-ddf-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a distribution — plot,ddf,missing-method","text":"x ddf object, distribution. xlab label \\(x\\)-axis. ylab label \\(y\\)-axis. col color points plot. main overall title plot. sub subtitle plot. y Unused argument. missing.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot-ddf-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a distribution — plot,ddf,missing-method","text":"ggplot object displaying given distribution.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/plot-ddf-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a distribution — plot,ddf,missing-method","text":"","code":"plot(pois(8))"},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the CDF of a distribution — plot_cdf","title":"Plot the CDF of a distribution — plot_cdf","text":"function creates plot cumulative distribution function (CDF) ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the CDF of a distribution — plot_cdf","text":"","code":"plot_cdf(   dist,   xlab = \"x\",   ylab = \"ℙ[X ≤ x]\",   col = \"deepskyblue3\",   main = NULL,   sub = NULL )"},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the CDF of a distribution — plot_cdf","text":"dist ddf object, distribution. xlab label \\(x\\)-axis. ylab label \\(y\\)-axis. col color points plot. main overall title plot. sub subtitle plot.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the CDF of a distribution — plot_cdf","text":"ggplot object displaying CDF given distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the CDF of a distribution — plot_cdf","text":"details cumulative density function, may consult cdf().","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the CDF of a distribution — plot_cdf","text":"","code":"# Plot the CDF of a binomial distribution plot_cdf(bin(20, 0.8))"},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_pmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the PMF of a distribution — plot_pmf","title":"Plot the PMF of a distribution — plot_pmf","text":"function creates plot probability mass function ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_pmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the PMF of a distribution — plot_pmf","text":"","code":"plot_pmf(   dist,   xlab = \"x\",   ylab = \"ℙ[X = x]\",   col = \"deepskyblue3\",   main = NULL,   sub = NULL )"},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_pmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the PMF of a distribution — plot_pmf","text":"dist ddf object, distribution. xlab label \\(x\\)-axis. ylab label \\(y\\)-axis. col color points plot. main overall title plot. sub subtitle plot.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_pmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the PMF of a distribution — plot_pmf","text":"ggplot object displaying PMF given distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_pmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the PMF of a distribution — plot_pmf","text":"details probability mass function, may consult pmf(). might also interested generic base::plot() method ddf objects.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/plot_pmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the PMF of a distribution — plot_pmf","text":"","code":"# Plot the PMF of a binomial distribution plot_pmf(bin(20, 0.8))  # A similar plot using the S4 generic plot(bin(20, 0.8))"},{"path":"https://fdf-uni.github.io/ddfr/reference/pmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability mass function — pmf","title":"Probability mass function — pmf","text":"Create R function behaves like probability mass function (PMF) given ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability mass function — pmf","text":"","code":"pmf(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/pmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability mass function — pmf","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability mass function — pmf","text":"function.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability mass function — pmf","text":"probability mass function \\(p_X\\) discrete random variable \\(X\\) given $$p_X(x) = \\mathbb{P}[X = x],$$ \\(\\mathbb{P}\\) probability operator.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability mass function — pmf","text":"","code":"# Get probability of 5 in a geometric distribution pmf(geometric(0.4))(5) #> [1] 0.031104"},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":null,"dir":"Reference","previous_headings":"","what":"The Poisson distribution — pois","title":"The Poisson distribution — pois","text":"Create ddf object Poisson distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Poisson distribution — pois","text":"","code":"pois(lambda, eps = 1e-10, normalize = TRUE)"},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The Poisson distribution — pois","text":"order calculate fitting cutoff, quantile function stats::qpois() used. stats::dpois() employed calculate distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Poisson distribution — pois","text":"lambda positive number, expected rate occurrences. eps positive number, close distribution approximated. See ‘Details.’ (default: 1e-10) normalize Logical, whether normalize approximated distribution. (default: TRUE)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Poisson distribution — pois","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Poisson distribution — pois","text":"Poisson distribution models number occurrences event within given time frame. , events occur independently, must able occur instant occur constant average rate, expressed parameter \\(\\lambda\\). support \\(\\mathbb{N}_0\\) probability mass function given $$p(k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}.$$ Poisson distribution countably infinite support package works discrete distributions finite support, resulting ddf object can approximate Poisson distribution. , support cut large enough integer overall probability still close 1. cutoff controlled via eps argument specifies close sum probabilities 1. default value 1e-10 since also minimum accuracy required creating valid ddf objects. default, .e. unless normalize set FALSE, specified accuracy raise problems even larger 1e-10 approximation normalized end (, approximating probabilities divided sum). ensures returned object actual distribution overall probability precisely one.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Poisson distribution — pois","text":"","code":"pois(0.3) #> (Approximation of a) poisson distribution with lambda = 0.3  #>  #> Support: #> [1] 0 1 2 3 4 5 6 7 8 #>  #> Probabilities: #> [1] 7.408182e-01 2.222455e-01 3.333682e-02 3.333682e-03 2.500261e-04 #> [6] 1.500157e-05 7.500784e-07 3.214622e-08 1.205483e-09 # A much more accurate approximation of the same distribution pois(0.3, .Machine$double.eps) #> (Approximation of a) poisson distribution with lambda = 0.3  #>  #> Support: #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 #>  #> Probabilities: #>  [1] 7.408182e-01 2.222455e-01 3.333682e-02 3.333682e-03 2.500261e-04 #>  [6] 1.500157e-05 7.500784e-07 3.214622e-08 1.205483e-09 4.018277e-11 #> [11] 1.205483e-12 3.287682e-14"},{"path":"https://fdf-uni.github.io/ddfr/reference/probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the probabilities of a ddf object — probs","title":"Get the probabilities of a ddf object — probs","text":"function returns probabilities elements support given distribution numerical vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the probabilities of a ddf object — probs","text":"","code":"probs(dist)  # S4 method for class 'ddf' probs(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the probabilities of a ddf object — probs","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the probabilities of a ddf object — probs","text":"Probabilities numerical vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/probs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the probabilities of a ddf object — probs","text":"","code":"probs(ddf(1:3)) #> [1] 0.3333333 0.3333333 0.3333333 probs(ddf(1:3, c(1 / 2, 1 / 4, 1 / 4))) #> [1] 0.50 0.25 0.25"},{"path":"https://fdf-uni.github.io/ddfr/reference/quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate quantiles of distributions — quantiles","title":"Calculate quantiles of distributions — quantiles","text":"function calculates \\(p\\)-quantiles ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate quantiles of distributions — quantiles","text":"","code":"quantiles(dist, p, method = \"all\")"},{"path":"https://fdf-uni.github.io/ddfr/reference/quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate quantiles of distributions — quantiles","text":"dist ddf object, distribution. p number 0 1, exclusive. method character specifying output format.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate quantiles of distributions — quantiles","text":"numeric vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/quantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate quantiles of distributions — quantiles","text":"\\(p\\)-quantile random variable \\(X\\) value \\(x\\) $$\\mathbb{P}[ X \\le x] \\ge p \\qquad\\text{ }\\qquad \\mathbb{P}[X \\ge x] \\ge 1-p,$$ \\(\\mathbb{P}\\) denotes probability operator. general, unique reason function method argument. method set \"\", values support \\(p\\)- quantile given distribution returned. default behaviour. method set \"mean\", mean values returned. method set \"min\" \"max\", respective elements \\(p\\)-quantiles support returned.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate quantiles of distributions — quantiles","text":"","code":"quantiles(unif(6), 1 / 2) #> [1] 3 4 # Using another method for output quantiles(unif(6), 1 / 2, method = \"mean\") #> [1] 3.5"},{"path":"https://fdf-uni.github.io/ddfr/reference/quartile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate quartiles of distributions — quartile","title":"Calculate quartiles of distributions — quartile","text":"function calculates \\(k\\)-th quartile ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/quartile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate quartiles of distributions — quartile","text":"","code":"quartile(dist, k, method = \"all\")"},{"path":"https://fdf-uni.github.io/ddfr/reference/quartile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate quartiles of distributions — quartile","text":"dist ddf object, distribution. k integer 0 4, exclusive. method character specifying output format.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/quartile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate quartiles of distributions — quartile","text":"numeric vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/quartile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate quartiles of distributions — quartile","text":"details consult details quantiles() recall \\(k\\)-th quartile \\(k/4\\)-quantile vice versa.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/quartile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate quartiles of distributions — quartile","text":"","code":"quartile(bin(10, 0.3), 3) #> [1] 4"},{"path":"https://fdf-uni.github.io/ddfr/reference/rademacher.html","id":null,"dir":"Reference","previous_headings":"","what":"The Rademacher distribution — rademacher","title":"The Rademacher distribution — rademacher","text":"Create ddf object Rademacher distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/rademacher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Rademacher distribution — rademacher","text":"","code":"rademacher()"},{"path":"https://fdf-uni.github.io/ddfr/reference/rademacher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Rademacher distribution — rademacher","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/rademacher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Rademacher distribution — rademacher","text":"Rademacher distribution support \\(\\{-1,1\\}\\) elements probability \\(\\frac{1}{2}\\) (, discrete uniform distribution \\(\\{-1,1\\}\\)). can used model simple symmetric random walks step size 1, especially convolved (compare ‘Examples’).","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/rademacher.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Rademacher distribution — rademacher","text":"https://en.wikipedia.org/wiki/Rademacher_distribution","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/rademacher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Rademacher distribution — rademacher","text":"","code":"rademacher() #> Rademacher distribution  #>  #> Support: #> [1] -1  1 #>  #> Probabilities: #> [1] 0.5 0.5  # Model a symmetric random walk starting at 0 # with step size 1 of length 4 conv_n(rademacher(), 4) #> 4-fold convolution of Rademacher distribution  #>  #> Support: #> [1] -4 -2  0  2  4 #>  #> Probabilities: #> [1] 0.0625 0.2500 0.3750 0.2500 0.0625"},{"path":"https://fdf-uni.github.io/ddfr/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report for a distribution — report","title":"Generate a report for a distribution — report","text":"function writes detailed report given ddf distribution involving properties various measures central tendency dispersion, skewness kurtosis .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report for a distribution — report","text":"","code":"report(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report for a distribution — report","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report for a distribution — report","text":"character.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a report for a distribution — report","text":"","code":"# Write a report on a binomial distribution # and output it using cat cat(report(bin(20, 0.4))) #> The given distribution could be described as \"Binomial distribution with parameters n = 20 and p = 0.4\". #>  #> It has a mean/expected value of 8, the average of its mode(s) is given by 8 and the average of its median(s) is 8. It is a unimodal distribution. #>  #> Regarding its dispersion, calculating its variance yields 4.8 which implies a standard deviation of 2.19089023002066. When talking about other measures of variability, one can assert that the distribution's range constitutes 20 over its 21 elements, whereas its interquartile range is given by 3 since the (smallest) first quartile is 6 and the (largest) third quartile is 9. #>  #> It has a skewness of 0.0912870929175291 (measured using Fisher's moment coefficient of skewness) and with an excess kurtosis of -0.0916666666666668 (and hence kurtosis of 2.90833333333333) it is a platykurtic, also called platykurtotic, distribution. #>  #> Lastly, it can be noted that its entropy, measured in bits, is 3.17713982274889."},{"path":"https://fdf-uni.github.io/ddfr/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Random samples from a distribution — samples","title":"Random samples from a distribution — samples","text":"function generates random samples given size based ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random samples from a distribution — samples","text":"","code":"samples(dist, n)"},{"path":"https://fdf-uni.github.io/ddfr/reference/samples.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Random samples from a distribution — samples","text":"generate samples, base::sample() used.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random samples from a distribution — samples","text":"dist ddf object, distribution. n non-negative integer giving number items choose.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random samples from a distribution — samples","text":"vector length n elements drawn distributions support.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random samples from a distribution — samples","text":"","code":"# Simulate throwing a dice 5 times samples(unif(6), 5) #> [1] 2 1 5 2 2"},{"path":"https://fdf-uni.github.io/ddfr/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift a distribution — shift","title":"Shift a distribution — shift","text":"Shift (support ) ddf distribution specified amount.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift a distribution — shift","text":"","code":"shift(dist, s, desc_shift = paste(desc(dist), \", shifted by \", s, sep = \"\"))"},{"path":"https://fdf-uni.github.io/ddfr/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift a distribution — shift","text":"dist ddf object, distribution. s number, shift applied distribution. desc_shift character, description shifted distribution. (optional)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift a distribution — shift","text":"ddf object, shifted distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift a distribution — shift","text":"","code":"# Distribution for a simple symmetric random walk with # step size 1 of length 4, centered at 3 (instead of 0) shift(conv_n(rademacher(), 4), 3) #> 4-fold convolution of Rademacher distribution, shifted by 3  #>  #> Support: #> [1] -1  1  3  5  7 #>  #> Probabilities: #> [1] 0.0625 0.2500 0.3750 0.2500 0.0625"},{"path":"https://fdf-uni.github.io/ddfr/reference/skew.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the skewness of distributions — skew","title":"Calculate the skewness of distributions — skew","text":"function calculates skewness ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/skew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the skewness of distributions — skew","text":"","code":"skew(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/skew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the skewness of distributions — skew","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/skew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the skewness of distributions — skew","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/skew.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the skewness of distributions — skew","text":"\"Skewness\" refers Fisher's moment coefficient skewness, also known Pearson's instead Fisher's name simply moment coefficient skewness. given third standardized moment, see also help standardized_moment(). distribution negative skew longer left tail, mass concentrated right end support plotting probability mass function one gets right-leaning curve. Analogously, distribution positive skew longer right tail, mass concentrated left end support plotting probability mass function one gets left-leaning curve.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/skew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the skewness of distributions — skew","text":"","code":"# A binomial distribution with success probability # p < 0.5 has positive skew skew(bin(10, 0.25)) #> [1] 0.3651484 # whereas one with p > 0.5 has negative skew skew(bin(10, 0.75)) #> [1] -0.3651484"},{"path":"https://fdf-uni.github.io/ddfr/reference/standard_deviation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the standard deviation of distributions — standard_deviation","title":"Calculate the standard deviation of distributions — standard_deviation","text":"function calculates standard deviation ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standard_deviation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the standard deviation of distributions — standard_deviation","text":"","code":"standard_deviation(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/standard_deviation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the standard deviation of distributions — standard_deviation","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standard_deviation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the standard deviation of distributions — standard_deviation","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standard_deviation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the standard deviation of distributions — standard_deviation","text":"standard deviation square root variance (second central moment). details see variance() better directly central_moment().","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standard_deviation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the standard deviation of distributions — standard_deviation","text":"","code":"# Standard deviation of a hypergeometric distribution standard_deviation(hypergeometric(20, 7, 3)) #> [1] 0.781446"},{"path":"https://fdf-uni.github.io/ddfr/reference/standardized_moment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standardized moments of distributions — standardized_moment","title":"Calculate standardized moments of distributions — standardized_moment","text":"function calculates \\(n\\)-th standardized moment ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standardized_moment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standardized moments of distributions — standardized_moment","text":"","code":"standardized_moment(dist, n)"},{"path":"https://fdf-uni.github.io/ddfr/reference/standardized_moment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standardized moments of distributions — standardized_moment","text":"dist ddf object, distribution. n integer, order moment.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standardized_moment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standardized moments of distributions — standardized_moment","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/standardized_moment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate standardized moments of distributions — standardized_moment","text":"\\(n\\)-th standardized moment random variable \\(X\\) given $$\\mu_n/\\sigma^n,$$ \\(\\mu_n\\) denotes \\(n\\)-th moment mean (see also central_moment()) \\(\\sigma^n\\) \\(n\\)-th power standard deviation. Note normalize \\(\\sigma^n\\), although sometimes normalizations used.","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/standardized_moment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate standardized moments of distributions — standardized_moment","text":"","code":"# The second standardized moment is always 1 standardized_moment(unif(10), 2) #> [1] 1  # The third standardized moment measures skewness # (compare ?skew()) standardized_moment(bin(10, 0.8), 3) #> [1] -0.4743416"},{"path":"https://fdf-uni.github.io/ddfr/reference/supp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the support of a ddf object — supp","title":"Get the support of a ddf object — supp","text":"function returns support given distribution numerical vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/supp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the support of a ddf object — supp","text":"","code":"supp(dist)  # S4 method for class 'ddf' supp(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/supp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the support of a ddf object — supp","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/supp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the support of a ddf object — supp","text":"Support numerical vector.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/supp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the support of a ddf object — supp","text":"support function defined points function's domain non-zero.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/supp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the support of a ddf object — supp","text":"","code":"supp(ddf(1:3)) #> [1] 1 2 3"},{"path":"https://fdf-uni.github.io/ddfr/reference/unif.html","id":null,"dir":"Reference","previous_headings":"","what":"The discrete uniform distribution — unif","title":"The discrete uniform distribution — unif","text":"Create ddf object discrete uniform distribution first \\(n\\) natural numbers (including excluding 0).","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The discrete uniform distribution — unif","text":"","code":"unif(n, start_at_one = TRUE)"},{"path":"https://fdf-uni.github.io/ddfr/reference/unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The discrete uniform distribution — unif","text":"n integer, upper end support. start_at_one Logical, whether start support 0 1. (default: TRUE)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The discrete uniform distribution — unif","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/unif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The discrete uniform distribution — unif","text":"discrete uniform distribution describes models finite number possible outcomes equally likely happen. general, arbitrary finite set, say cardinality \\(N\\\\mathbb{N}\\), support every element support probability \\(\\frac{1}{N}\\). function, however, generates uniform distribution support \\(\\{1, \\dots, n\\}\\) \\(\\{0, \\dots, n\\}\\). complicated supports, expected much easier simply use ddf() without specifying probabilities, rather using custom function like one. demonstration , see also ‘Examples’ .","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/unif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The discrete uniform distribution — unif","text":"","code":"# Probability distribution for modelling a # six-sided dice (uniform on {1, ..., 6}) unif(6) #> Discrete uniform distribution on {1, ..., 6}  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667  # For more complicated supports, use ddf # Same distribution as above (except for description): ddf(1:6) #> A discrete distribution with finite support  #>  #> Support: #> [1] 1 2 3 4 5 6 #>  #> Probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 # Not possible using unif: ddf(seq(3, 12, 3)) #> A discrete distribution with finite support  #>  #> Support: #> [1]  3  6  9 12 #>  #> Probabilities: #> [1] 0.25 0.25 0.25 0.25"},{"path":"https://fdf-uni.github.io/ddfr/reference/variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the variance of distributions — variance","title":"Calculate the variance of distributions — variance","text":"function calculates variance ddf distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the variance of distributions — variance","text":"","code":"variance(dist)"},{"path":"https://fdf-uni.github.io/ddfr/reference/variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the variance of distributions — variance","text":"dist ddf object, distribution.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the variance of distributions — variance","text":"double.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/variance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the variance of distributions — variance","text":"variance second central moment. details see corresponding help, .e. central_moment(). measure dispersions, .e. measures much mass distribution spread around mean. lower variance indicates values expected closer mean.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the variance of distributions — variance","text":"","code":"# Variance of a binomial distribution variance(bin(10, 0.3)) #> [1] 2.1 # Using the corresponding formula 10 * 0.3 * (1 - 0.3) #> [1] 2.1"},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":null,"dir":"Reference","previous_headings":"","what":"The Zipf distribution — zipf","title":"The Zipf distribution — zipf","text":"Create ddf object Zipf distribution given parameters.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Zipf distribution — zipf","text":"","code":"zipf(N, s = 1)"},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Zipf distribution — zipf","text":"N positive integer, total number elements. s positive number, exponent inverse power law. See ‘Details.’ (Default: 1)","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Zipf distribution — zipf","text":"ddf distribution described .","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Zipf distribution — zipf","text":"Zipf's law empirical law stating relative frequency \\(n\\)-th entry list measured values, ordered decreasing order, inversely proportional \\(n\\). can generalized formalized following inverse power law exponent \\(s\\): generalized Zipf distribution \\(N\\) symbols support \\(\\{1, \\dots, N\\}\\) probability mass function given $$p(k) = \\frac{1}{H_{N, s}} \\frac{1}{k^s},$$ \\(H_{N, s}\\) generalized harmonic number: $$H_{N, s} = \\sum_{k=1}^{N} \\frac{1}{k^s}.$$ examples Zipf's law occurs details, recommend linked Wikipedia article.","code":""},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Zipf distribution — zipf","text":"https://en.wikipedia.org/wiki/Zipf%27s_law","code":""},{"path":[]},{"path":"https://fdf-uni.github.io/ddfr/reference/zipf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Zipf distribution — zipf","text":"","code":"# The Zipf distribution on 5 elements zipf(5) #> Zipf distribution on N = 5 elements with parameter s = 1  #>  #> Support: #> [1] 1 2 3 4 5 #>  #> Probabilities: #> [1] 0.43795620 0.21897810 0.14598540 0.10948905 0.08759124"}]
