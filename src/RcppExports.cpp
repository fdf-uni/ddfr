// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convolve_cpp
Rcpp::List convolve_cpp(const Rcpp::NumericVector& supp1, const Rcpp::NumericVector& probs1, const Rcpp::NumericVector& supp2, const Rcpp::NumericVector& probs2);
RcppExport SEXP _ddfr_convolve_cpp(SEXP supp1SEXP, SEXP probs1SEXP, SEXP supp2SEXP, SEXP probs2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type supp1(supp1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type probs1(probs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type supp2(supp2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type probs2(probs2SEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_cpp(supp1, probs1, supp2, probs2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ddfr_convolve_cpp", (DL_FUNC) &_ddfr_convolve_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ddfr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
